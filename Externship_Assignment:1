##CELL: 1 
import pandas as pd
import numpy as np

#CELL: 2
#reading both the files
anime=pd.read_csv('/content/anime.csv' ,sep=',')
classification=pd.read_csv('/content/rating.csv' ,sep=',')
print(anime.head())
print(classification.head())

#CELL: 3
#reading both the files
anime=pd.read_csv('/content/anime.csv' ,sep=',')
classification=pd.read_csv('/content/rating.csv' ,sep=',')
print(anime.head())
print(classification.head())

#CELL: 4
#dimension of both the csv file
print(anime.shape)
print(classification.shape)



#CELL: 5
anime.head()


#CELL: 6
classification.head()



#CELL: 7
anime.isnull().sum()


#CELL: 8
#data types of each column
print(anime.dtypes)
print(classification.dtypes)


#CELL: 9
#null values
print(anime.isna() .sum())
print(classification.isna() .sum())


#CELL: 10
#duplicates
print(anime.loc[anime.duplicated()])
print(classification.loc[classification.duplicated()])


#CELL: 11
##preprocessing the data
anime.rename(columns={'name':'Name','genre':'Genre','type':'Type','episodes':'Episodes','rating':'classification','members':'Members'},inplace=True)
classification.rename(columns={'rating':'classification'},inplace=True)
print(anime.columns)
print(classification.columns)


#CELL: 12
#remove duplicate values
classification.drop_duplicates(inplace=True)


#CELL: 13
#Filling in null values
anime['classification'].fillna(anime['classification'].median() , inplace=True)
anime['Genre'].fillna(anime['Genre'].mode()[0],inplace=True)
anime['Type'].fillna(anime['Type'].mode()[0],inplace=True)


#CELL: 14
df=pd.merge(anime,classification,on='anime_id')

#CELL: 15
df.rename(columns={'classification_y':'user_classification','classification_x':'classification'},inplace=True)


#CELL: 16
df.shape

#CELL: 17
df.head()


#CELL: 18
from sklearn.preprocessing import StandardScaler

# Select numerical columns to scale
numerical_columns = ['classification', 'Members']

# Initialize the scaler
scaler = StandardScaler()

# Fit and transform the scaler on the numerical columns
df[numerical_columns] = scaler.fit_transform(df[numerical_columns])


#CELL: 19
from sklearn.preprocessing import LabelEncoder

# Select categorical columns to label encode
categorical_columns = ['Name', 'Genre', 'Type', 'user_classification']

# Initialize the label encoder
label_encoder = LabelEncoder()

# Apply label encoding on each categorical column
for col in categorical_columns:
    df[col] = label_encoder.fit_transform(df[col])

#CELL: 20
##Visualization
import plotly.express as px
Top_anime_classification=anime.sort_values(by='classification',ascending=False)
#creating barchart
fig=px.bar(
    x=Top_anime_classification['Name'][:20],
    y=Top_anime_classification['classification'][:20],
    labels={'x':'Name of anime','y':'classification'},
    title='Top anime by ranking',

)
fig.show()


#CELL:
#best anime by community
Top_anime_members=anime.sort_values(by='Members',ascending=False)
fig1=px.bar(
    x=Top_anime_members['Name'][:20],
    y=Top_anime_members['Members'][:20],
    labels={'x':'Name of anime','y':'Total Members'},
    title='Top anime members',
)
fig1.show()

#CELL:
#anime category distribution
fig2=px.bar(
    x=anime.value_counts('Type').index,
    y=anime.value_counts('Type').values,
    labels={'x':'Category','y':'Frequency'},
    title='Category of anime'
)
fig2.show()

